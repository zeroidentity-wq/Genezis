Exceptions provide a way to transfer control from one part of a program to another. C++ exception handling is built upon three keywords: try, catch, and throw.

    throw − A program throws an exception when a problem shows up. This is done using a throw keyword.

    catch − A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.

    try − A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.

/////////////////////////////////////////////

try 
{
   // protected code
} 
catch( ExceptionName e1 ) 
{
   // catch block
} 
catch( ExceptionName e2 ) 
{
   // catch block
} 
catch( ExceptionName eN ) 
{
   // catch block
}

/////////////////////////////////////////////

Exemplu throw:

double division(int a, int b) 
{
	if( b == 0 ) 
	{
		throw "Division by zero condition!";
	}

   	return (a/b);
}

////////////////////////////////////////////

Exemplu catch:

try 
{
   // protected code
} 
catch( ExceptionName e ) 
{
  // code to handle ExceptionName exception
}

try 
{
   // protected code
} 
catch(...) 
{
  // code to handle any exception
}

//////////////////////////////////////////

Exceptii din standardul C++:

std::exception
An exception and parent class of all the standard C++ exceptions.

/////////////////////

std::bad_alloc
This can be thrown by new.

/////////////////////

std::bad_cast
This can be thrown by dynamic_cast.

////////////////////	

std::bad_exception
This is useful device to handle unexpected exceptions in a C++ program.

////////////////////

std::bad_typeid
This can be thrown by typeid.

////////////////////

std::logic_error
An exception that theoretically can be detected by reading the code.

////////////////////

std::domain_error
This is an exception thrown when a mathematically invalid domain is used.
	
////////////////////

std::invalid_argument
This is thrown due to invalid arguments.

////////////////////

std::length_error
This is thrown when a too big std::string is created.

////////////////////

std::out_of_range
This can be thrown by the 'at' method, for example a std::vector and std::bitset<>::operator[]().

////////////////////

std::runtime_error
An exception that theoretically cannot be detected by reading the code.

////////////////////

std::overflow_error
This is thrown if a mathematical overflow occurs.

////////////////////

std::range_error
This is occurred when you try to store a value which is out of range.

////////////////////	

std::underflow_error
This is thrown if a mathematical underflow occurs.
